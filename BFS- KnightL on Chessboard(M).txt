import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the knightlOnAChessboard function below.
    static int[][] knightlOnAChessboard(int n) {
        int[][] result=new int[n-1][n-1];
        for(int i=1;i<n;i++){
            for(int j=1;j<n;j++){
                if(result[j-1][i-1]!=0){
                    result[i-1][j-1]=result[j-1][i-1];
                    continue;
                }
                if(result[i-1][j-1]==0){
                    result[i-1][j-1]=move(n,i,j);
                }
            }
        }
        return result;
    }
    static int move(int n,int a,int b){
        int[] rd = new int[] {b, a,  b,  a, -a, -b, -a, -b};
        int[] cd = new int[] {a, b, -a, -b,  b,  a, -b, -a};
        int visited[][]=new int[n][n];
        Queue<int[]> q=new LinkedList<>();
        q.add(new int[]{0,0,0});
        visited[0][0]=1;
        int rr=n-1,rc=n-1;
        while(!q.isEmpty()){
            int cur[]=q.poll();
            if(cur[0]==rr&&cur[1]==rc)
                return cur[2];
            for(int i=0;i<8;i++){
                int x=rd[i]+cur[0];
                int y=cd[i]+cur[1];
                if(x>=0&&x<n&&y>=0&&y<n&&visited[x][y]==0){
                    q.add(new int[]{x,y,cur[2]+1});
                    visited[x][y]=1;
                }
            }
        }
        return -1;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[][] result = knightlOnAChessboard(n);

        for (int i = 0; i < result.length; i++) {
            for (int j = 0; j < result[i].length; j++) {
                bufferedWriter.write(String.valueOf(result[i][j]));

                if (j != result[i].length - 1) {
                    bufferedWriter.write(" ");
                }
            }

            if (i != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
