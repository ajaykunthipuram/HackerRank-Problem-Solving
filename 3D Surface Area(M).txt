#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the surfaceArea function below.
int surfaceArea(vector<vector<int>> A) {
    int area=0;
    int a1=A.size();
    int a2=A[0].size();
    if(a1==1){
        if(a2==1){
            if(A[0][0]==0) return 0;
            else return 4*A[0][0]+2;
        }
        else{
            area+=3*(A[0][0]+A[0][a2-1]);
            if(a2>2){
                for(int i=1;i<a2-1;i++){
                    area+=(2*(A[0][i]));
                }
            }
            for(int i=0;i<a2;i++){
                if(A[0][i]>0) area+=2;
            }
            for(int i=0;i<a2-1;i++){
                area+=(abs(A[0][i]-A[0][i+1]));
            }
        }
    }
    else if(a2==1 && a1!=1){
        area+=3*(A[0][0]+A[a1-1][0]);
        if(a1>2){
            for(int i=1;i<a1-1;i++){
                area+=(2*(A[i][0]));
            }
        }
        for(int i=0;i<a1;i++){
            if(A[i][0]>0) area+=2;
        }
        for(int i=0;i<a1-1;i++){
            area+=(abs(A[i][0]-A[i+1][0]));
        }
    }
    else{
    for(int i=0;i<A.size();i++){
        for(int j=0;j<A[0].size();j++){
            if((j==0 && i==0) || (j==0 && i==a1-1)){
                area+=(2*A[i][j]);
            }
            else if((j==a2-1 && i==0)||(j==a2-1 && i==a1-1)){
                area+=(2*A[i][j]);
            }
            else if(i==0 || i==a1-1 || j==0 || j==a2-1){
                area+=A[i][j];
            }
            if(A[i][j]>0){
                area+=2;
            }
        }
    }
    for(int i=0;i<a1;i++){
        for(int j=0;j<a2-1;j++){
            area+=(abs(A[i][j]-A[i][j+1]));
        }
    }
    for(int i=0;i<a2;i++){
        for(int k=0;k<a1-1;k++){
            area+=(abs(A[k][i]-A[k+1][i]));
        }
    }
    }
    return area;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string HW_temp;
    getline(cin, HW_temp);

    vector<string> HW = split_string(HW_temp);

    int H = stoi(HW[0]);

    int W = stoi(HW[1]);

    vector<vector<int>> A(H);
    for (int i = 0; i < H; i++) {
        A[i].resize(W);

        for (int j = 0; j < W; j++) {
            cin >> A[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int result = surfaceArea(A);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
