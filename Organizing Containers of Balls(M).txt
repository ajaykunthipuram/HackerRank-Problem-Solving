#include <bits/stdc++.h>

using namespace std;

// Complete the organizingContainers function below.
string organizingContainers(vector<vector<int>> container) {
    vector<int>c1;
    vector<int>c2;
    int temp=0;
    int n=container.size();
    for(int i=0;i<n;i++){
        temp=0;
        for(int j=0;j<n;j++){
            temp+=container[i][j];
        }
        c1.push_back(temp);
    }
    for(int i=0;i<n;i++){
        temp=0;
        for(int j=0;j<n;j++){
            temp+=container[j][i];
        }
        c2.push_back(temp);
    }
    sort(c1.begin(),c1.end());
    sort(c2.begin(),c2.end());
    for(int i=0;i<c1.size();i++){
        if(c1[i]!=c2[i]) return "Impossible";
    }
    return "Possible";
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int q;
    cin >> q;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int q_itr = 0; q_itr < q; q_itr++) {
        int n;
        cin >> n;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        vector<vector<int>> container(n);
        for (int i = 0; i < n; i++) {
            container[i].resize(n);

            for (int j = 0; j < n; j++) {
                cin >> container[i][j];
            }

            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }

        string result = organizingContainers(container);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}
