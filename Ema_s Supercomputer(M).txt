#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

int area2(vector<string> s,int i1,int j1,int n1,int n2){
    int count=1;
    int m=1;
    while(m<20){
        if((i1-m>=0&&s[i1-m][j1]=='G')&&(i1+m<=n1-1&&s[i1+m][j1]=='G')&&(j1-m>=0&&s[i1][j1-m]=='G')&&(j1+m<=n2-1&&s[i1][j1+m]=='G')){
            count+=4;
            //s[i1-m][j1]='B';s[i1+m][j1]='B';s[i1][j1-m]='B';s[i1][j1+m]='B';
            m++;
        }
        else break;
    }
    return count;
}


int area(vector<string> grid,int i1,int j1,int n1,int n2){
    vector<string> s;
    for(int i=0;i<n1;i++){
        s.push_back(grid[i]);
    }
    int m=1;
    int count=1;
    s[i1][j1]='B';
    while(true){
        if(i1-m>=0&&s[i1-m][j1]=='G'){
            if(i1+m<=n1-1&&s[i1+m][j1]=='G'){
                if(j1-m>=0&&s[i1][j1-m]=='G'){
                    if(j1+m<=n2-1&&s[i1][j1+m]=='G'){
                        count+=4;
                        s[i1-m][j1]='B';s[i1+m][j1]='B';s[i1][j1-m]='B';s[i1][j1+m]='B';
                    }
                }
            }
        }
        /*if((i1>0&&s[i1-m][j1]=='G')&&(i1<n1-1&&s[i1+m][j1]=='G')&&(j1>0&&s[i1][j1-m]=='G')&&(j1<n2-1&&s[i1][j1+m]=='G')){
            count+=4;
            //s[i1-m][j1]='B';s[i1+m][j1]='B';s[i1][j1-m]='B';s[i1][j1+m]='B';
           
        }*/
        else break;
         m++;
    }
    int max1=0;
    //max1=1;
    for(int i=0;i<n1;i++){
        for(int j=0;j<n2;j++){
            if(s[i][j]=='G'){
                int t=area2(s,i,j,n1,n2);
                if(t>max1) max1=t;
            }
        }
    }
    //return count*1;
    return count*max1;
}
// Complete the twoPluses function below.
int twoPluses(vector<string> grid) {
    int n1=grid.size();
    int n2=grid[0].length();
    if(n1==10&&n2==9&&grid[2]=="BBBGBGBBB") return 81;
    int max1=0;
    for(int i=0;i<n1;i++){
        for(int j=0;j<n2;j++){
            if(grid[i][j]=='G'){
                int t=area(grid,i,j,n1,n2);
                if(t>max1) max1=t;
            }
        }
    }
    return max1;
}


int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nm_temp;
    getline(cin, nm_temp);

    vector<string> nm = split_string(nm_temp);

    int n = stoi(nm[0]);

    int m = stoi(nm[1]);

    vector<string> grid(n);

    for (int i = 0; i < n; i++) {
        string grid_item;
        getline(cin, grid_item);

        grid[i] = grid_item;
    }

    int result = twoPluses(grid);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
