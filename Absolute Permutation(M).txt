import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the absolutePermutation function below.
    static int[] absolutePermutation(int n, int k) {
        int[] a=new int[n];
        if(k==0){
            //int[] a=new int[n];
            for(int i=0;i<n;i++){
                a[i]=i+1;
            }
            return a;
        }
        else if(n%k!=0 || k>=n||k>n/2||(n/k)%2!=0) {
            int[] b=new int[1];
            b[0]=-1; 
            return b;
        }
        else if(k==1 && n%2==1){
            int[] b=new int[1];
            b[0]=-1; 
            return b;
        }
        else{
            int flag=1;int j=0;
            while(j<n){
                for(int i=j;i<k+j&&i<n&&i+1+k<=n;i++){
                    a[i]=i+1+k;
                }
                j+=k;
                for(int i=j;i<k+j&&i<n&&i+1-k<=n;i++){
                    a[i]=i+1-k;
                }
                j+=k;
            }
        }
        return a;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int tItr = 0; tItr < t; tItr++) {
            String[] nk = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nk[0]);

            int k = Integer.parseInt(nk[1]);

            int[] result = absolutePermutation(n, k);

            for (int i = 0; i < result.length; i++) {
                bufferedWriter.write(String.valueOf(result[i]));

                if (i != result.length - 1) {
                    bufferedWriter.write(" ");
                }
            }

            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
